// Source code is decompiled from a .class file using FernFlower decompiler.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServidorRMI extends UnicastRemoteObject implements InterfaceServidor {
   private static final String ESP_IP = "192.168.98.36";
   private static final int ESP_PORT = 80;

   protected ServidorRMI() throws RemoteException {
   }

   public String enviarComando(String var1) throws RemoteException {
      try {
         Socket var2 = new Socket("192.168.98.36", 80);

         String var7;
         try {
            PrintWriter var3 = new PrintWriter(var2.getOutputStream(), true);

            try {
               BufferedReader var4 = new BufferedReader(new InputStreamReader(var2.getInputStream()));

               try {
                  var3.println(var1);
                  StringBuilder var5 = new StringBuilder();

                  while(true) {
                     String var6;
                     if ((var6 = var4.readLine()) == null) {
                        var7 = var5.toString().trim();
                        break;
                     }

                     var5.append(var6).append("\n");
                  }
               } catch (Throwable var11) {
                  try {
                     var4.close();
                  } catch (Throwable var10) {
                     var11.addSuppressed(var10);
                  }

                  throw var11;
               }

               var4.close();
            } catch (Throwable var12) {
               try {
                  var3.close();
               } catch (Throwable var9) {
                  var12.addSuppressed(var9);
               }

               throw var12;
            }

            var3.close();
         } catch (Throwable var13) {
            try {
               var2.close();
            } catch (Throwable var8) {
               var13.addSuppressed(var8);
            }

            throw var13;
         }

         var2.close();
         return var7;
      } catch (IOException var14) {
         var14.printStackTrace();
         return "Erro ao comunicar com o ESP: " + var14.getMessage();
      }
   }

   public static void main(String[] var0) {
      try {
         Registry var1 = LocateRegistry.createRegistry(1099);
         var1.rebind("ServidorRMI", new ServidorRMI());
         System.out.println("Servidor RMI iniciado.");
      } catch (Exception var2) {
         var2.printStackTrace();
      }

   }
}
